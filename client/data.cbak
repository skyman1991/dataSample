#include "ad7606.h"
#include "data.h"
#include "apue.h"
#include <sys/socket.h>
#include <linux/in.h>
#include <sys/types.h>
#include <stdlib.h>
#include <string.h>

#define MAXSLEEP 128  //socket retry sleep time
#define PORT 8081

int enter_flag = 0;

int file_flag = 1; //which file to write

/*
void data_process()
{
	u16 data;
	for(g_tAD.usRead = 0,g_tAD.usWrite = FIFO_SIZE; g_tAD.usRead < FIFO_SIZE; g_tAD.usRead++)
		if(getAdcFromFifo(&data) == 1)
			printf("%d\t",data);
		else {
			err_sys("print data error");
		}
}
*/

int connect_retry(int sockfd,const struct sockaddr *addr,socklen_t alen) 
{
	int numsec;
	for (numsec = 1; numsec <= MAXSLEEP; numsec <<= 1) {
		if(connect(sockfd,addr,alen) == 0)
			return 0;
		if(numsec <= MAXSLEEP/2)
			sleep(numsec);
		printf("sleep\n");
	}
	return -1;
}

int socket_init()
{
	int sockfd;
	struct sockaddr_in s_add;
	u16 portnum = PORT;
	char *server_ip = "222.199.193.12";

	if((sockfd = socket(AF_INET,SOCK_STREAM,0)) == -1) {
		printf("socket failed!\n");
		return -1;
	}

	memset(&s_add,0,sizeof(struct sockaddr_in));
	s_add.sin_family = AF_INET;
	s_add.sin_addr.s_addr = inet_addr(server_ip);
	s_add.sin_port = htons(portnum);

	if((connect_retry(sockfd,(struct sockaddr *)(&s_add),sizeof(struct sockaddr))) == -1) {
		printf("connect failed!\n");
		return -1;
	}
}

void data_write(int _fd)
{
	lseek(_fd,0,SEEK_SET);
	u16 data;
	for(g_tAD.usRead = 0,g_tAD.usWrite = FIFO_SIZE; g_tAD.usRead < FIFO_SIZE; g_tAD.usRead++)
		if(getAdcFromFifo(&data) == 1)
			write(_fd,&data,2);
		else {
			err_sys("print data error");
		}
}

void data_read(int _fd)
{
	u16 data;
	lseek(_fd,0,SEEK_SET);
	while(1) {
		enter_flag++;
		if(read(_fd,&data,2) > 0 ) {
			if(enter_flag == 8) {
				printf("%d\n",data);
				enter_flag = 0;
			}
			else
				printf("%d\t",data);
		}
		else{
			enter_flag = 0;
			break;
		}
	}
}

